package com.client.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.client.models.ChatMsg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MSG".
*/
public class ChatMsgDao extends AbstractDao<ChatMsg, Long> {

    public static final String TABLENAME = "CHAT_MSG";

    /**
     * Properties of entity ChatMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FromUser = new Property(1, String.class, "FromUser", false, "FROM_USER");
        public final static Property ToUser = new Property(2, String.class, "ToUser", false, "TO_USER");
        public final static Property MsgDate = new Property(3, java.util.Date.class, "MsgDate", false, "MSG_DATE");
        public final static Property MsgType = new Property(4, String.class, "MsgType", false, "MSG_TYPE");
        public final static Property MsgBody = new Property(5, byte.class, "MsgBody", false, "MSG_BODY");
    };


    public ChatMsgDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MSG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FROM_USER\" TEXT NOT NULL ," + // 1: FromUser
                "\"TO_USER\" TEXT NOT NULL ," + // 2: ToUser
                "\"MSG_DATE\" INTEGER NOT NULL ," + // 3: MsgDate
                "\"MSG_TYPE\" TEXT NOT NULL ," + // 4: MsgType
                "\"MSG_BODY\" INTEGER NOT NULL );"); // 5: MsgBody
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MSG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFromUser());
        stmt.bindString(3, entity.getToUser());
        stmt.bindLong(4, entity.getMsgDate().getTime());
        stmt.bindString(5, entity.getMsgType());
        stmt.bindLong(6, entity.getMsgBody());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChatMsg readEntity(Cursor cursor, int offset) {
        ChatMsg entity = new ChatMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // FromUser
            cursor.getString(offset + 2), // ToUser
            new java.util.Date(cursor.getLong(offset + 3)), // MsgDate
            cursor.getString(offset + 4), // MsgType
            (byte) cursor.getShort(offset + 5) // MsgBody
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatMsg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFromUser(cursor.getString(offset + 1));
        entity.setToUser(cursor.getString(offset + 2));
        entity.setMsgDate(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setMsgType(cursor.getString(offset + 4));
        entity.setMsgBody((byte) cursor.getShort(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChatMsg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChatMsg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
