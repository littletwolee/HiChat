package com.client.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.client.models.ChatMsg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MSG".
*/
public class ChatMsgDao extends AbstractDao<ChatMsg, Void> {

    public static final String TABLENAME = "CHAT_MSG";

    /**
     * Properties of entity ChatMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Fromuser = new Property(0, String.class, "Fromuser", false, "FROMUSER");
        public final static Property Touser = new Property(1, String.class, "Touser", false, "TOUSER");
        public final static Property Msgdate = new Property(2, java.util.Date.class, "Msgdate", false, "MSGDATE");
        public final static Property Msgtype = new Property(3, int.class, "Msgtype", false, "MSGTYPE");
        public final static Property Msgbody = new Property(4, byte[].class, "Msgbody", false, "MSGBODY");
    };


    public ChatMsgDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MSG\" (" + //
                "\"FROMUSER\" TEXT NOT NULL ," + // 0: Fromuser
                "\"TOUSER\" TEXT NOT NULL ," + // 1: Touser
                "\"MSGDATE\" INTEGER NOT NULL ," + // 2: Msgdate
                "\"MSGTYPE\" INTEGER NOT NULL ," + // 3: Msgtype
                "\"MSGBODY\" BLOB NOT NULL );"); // 4: Msgbody
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MSG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatMsg entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getFromuser());
        stmt.bindString(2, entity.getTouser());
        stmt.bindLong(3, entity.getMsgdate().getTime());
        stmt.bindLong(4, entity.getMsgtype());
        stmt.bindBlob(5, entity.getMsgbody());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ChatMsg readEntity(Cursor cursor, int offset) {
        ChatMsg entity = new ChatMsg( //
            cursor.getString(offset + 0), // Fromuser
            cursor.getString(offset + 1), // Touser
            new java.util.Date(cursor.getLong(offset + 2)), // Msgdate
            cursor.getInt(offset + 3), // Msgtype
            cursor.getBlob(offset + 4) // Msgbody
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatMsg entity, int offset) {
        entity.setFromuser(cursor.getString(offset + 0));
        entity.setTouser(cursor.getString(offset + 1));
        entity.setMsgdate(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setMsgtype(cursor.getInt(offset + 3));
        entity.setMsgbody(cursor.getBlob(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ChatMsg entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ChatMsg entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
